// +build !ignore_autogenerated

// Code generated by openapi-gen. DO NOT EDIT.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/darthlukan/echo-operator/pkg/apis/echo/v1alpha1.Echo":       schema_pkg_apis_echo_v1alpha1_Echo(ref),
		"github.com/darthlukan/echo-operator/pkg/apis/echo/v1alpha1.EchoSpec":   schema_pkg_apis_echo_v1alpha1_EchoSpec(ref),
		"github.com/darthlukan/echo-operator/pkg/apis/echo/v1alpha1.EchoStatus": schema_pkg_apis_echo_v1alpha1_EchoStatus(ref),
	}
}

func schema_pkg_apis_echo_v1alpha1_Echo(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Echo is the Schema for the echos API",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/darthlukan/echo-operator/pkg/apis/echo/v1alpha1.EchoSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/darthlukan/echo-operator/pkg/apis/echo/v1alpha1.EchoStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/darthlukan/echo-operator/pkg/apis/echo/v1alpha1.EchoSpec", "github.com/darthlukan/echo-operator/pkg/apis/echo/v1alpha1.EchoStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_echo_v1alpha1_EchoSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "EchoSpec defines the desired state of Echo",
				Properties: map[string]spec.Schema{
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "Message is the message which Echo should print to STDOUT",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"replicas": {
						SchemaProps: spec.SchemaProps{
							Description: "Replicas is the number of Echos which should exist",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"namespace": {
						SchemaProps: spec.SchemaProps{
							Description: "Namespace is the namespace in which an Echo should be deployed",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"version": {
						SchemaProps: spec.SchemaProps{
							Description: "Version is the version tag on the application image to use, default is 'latest'",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"message", "namespace"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_echo_v1alpha1_EchoStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "EchoStatus defines the observed state of Echo",
				Properties: map[string]spec.Schema{
					"nodes": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
				Required: []string{"nodes"},
			},
		},
		Dependencies: []string{},
	}
}
